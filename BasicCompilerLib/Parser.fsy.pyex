%{

open Tree
open ASTBuildUtils

let sp (itemA:Annot) = itemA.Pos.StartPos
let ep (itemA:Annot) = itemA.Pos.EndPos

let v = snd<Pos,_>
let p = fst<Pos,_>

let nop = ea Nop Pos.NilPos

let applyTypeParamsConstraints<'a when 'a :> ITemplate> tps tcs (item:ITemplate) =
    if List.length tps > 0 then
        item.TypeParams <- tps
    if List.length tcs > 0 then
        item.TypeConstraints <- tcs
    item :?> 'a

let buildAutoCtor list_ typeName typeParams =
    let initType = InitialType typeName
    let ctorRetType = match List.length typeParams with
        | 0 -> initType
        | _ -> ParamedType (initType, List.map (fun tp -> InitialType tp) typeParams)

    let classVars = List.ofSeq <| Seq.map (fun (vis, name, ptype, startPos, endPos) ->
        cbb (ClassVar (name, vis, NotStatic, ref ptype, nop)) startPos endPos) list_
    let ctorNamesParams = Seq.map (fun (_, name, ptype, _, _) -> (name, Param(name, ptype))) list_
    let ctorNames = Seq.map fst ctorNamesParams |> List.ofSeq
    let ctorParams = Seq.map snd ctorNamesParams |> List.ofSeq

    let ctorNew = "@ret"

    let ctorCreate =
        let call = eanp <| Call (eanp <| Var "ctor", [])
        eanp <| DeclVar (ctorNew, eanp <| Assign (eanp <| Var ctorNew, call))

    let ctorAssign name =
        let makeDot () = eanp <| Dot (eanp <| Var ctorNew, name)
        eanp <| Assign (makeDot (), eanp <| Var name)

    let ctorAssigns =
        List.rev ctorNames
        |> Seq.fold (fun state x -> eanp <| Seq (ref <| ctorAssign x, ref state)) nop
    let ctorRet = eanp << Return << eanp <| Var ctorNew
    let ctorEA = eanp <| Seq (ref ctorCreate, ref << eanp <| Seq (ref ctorAssigns, ref ctorRet ))

    let ctor = ClassDeclA(ClassProc ("new", Public, Static, ref ctorParams, ref ctorRetType, ctorEA), Pos.NilPos)
    ctor :: classVars

let buildClassStruct vis classOrStruct name typeParams autoCtorBuilder ifaces typeConstraints cAs startPos endPos =
    let autoCtorCAs = autoCtorBuilder name typeParams
    nbb (Class (name, vis, classOrStruct, ref ifaces, autoCtorCAs @ cAs)) startPos endPos
    |> applyTypeParamsConstraints typeParams typeConstraints

let buildMixin vis name typeParams autoCtorBuilder ifaces typeConstraints cAs startPos endPos =
    let interfaceDecls =
        Util.getSomes <| Seq.map (fun (cA:ClassDeclA) -> match cA.Item with
            | ClassProc (name, vis, isSt, params_, returnType, _)
                when vis = Public && isSt = NotStatic && not (isNonExpandedTemplate cA) ->
                    let newParams = List.map (fun (p:Param) -> Param(p.Name, p.PType)) !params_
                    Some << ianp <| InterfaceProc (name, newParams, ref !returnType)
            | _ -> None) cAs

    let iface:NDA =
        nanp <| Interface (name, vis, ref ifaces, List.ofSeq interfaceDecls)
        |> applyTypeParamsConstraints typeParams typeConstraints

    let mixinClassIfaces = [InitialType name]
    let mixin = buildClassStruct vis NotStruct (mixinSigil name) typeParams autoCtorBuilder mixinClassIfaces typeConstraints cAs startPos endPos

    iface.MixinClass <- Some mixin

    [iface; mixin]

let buildMixinClass name ptype eA forwarding startPos endPos =
    let cA = cbb (ClassVar (name, Private, NotStatic, ref ptype, eA)) startPos endPos
    cA.MixinForwarding <- Some forwarding
    cA




%}

$py(binops=['BINOP' + str(x) for x in range(0,7)])

%token<(Pos * int64)>  INT8 INT16 INT32 INT64 
%token<(Pos * string)> IDENT TYPENAME$for(binop in binops) $(binop)$endfor
%token<Pos>            TRUE FALSE
%token<Pos>            LPAR RPAR EOF PRINT COMMA COLON
%token<Pos>            RETURN LCURLY RCURLY LSQUARE RSQUARE SEMI START PROC EQUALS LET
%token<Pos>            IF THEN ELSE WHILE DO VAR
%token<Pos>            NAMESPACE CLASS STRUCT INTERFACE MIXIN FORWARDING HIDING ALL
%token<Pos>            PRIVATE PUBLIC
%token<Pos>            STATIC CONSTRUCTOR
%token<Pos>            ARROW USING DOT SRO GENSPACEOP WHERE

%type<CompilationUnit> program
%start program

%left SEMI
$for(binop in binops)\
%left $(binop)
$endfor\
%right ARROW

%%

program: topLevelDecls EOF
    { \$1 }


visibility:
    | /* empty */
        { Private }
    | PRIVATE
        { Private }
    | PUBLIC
        { Public }

static_:
    | /* empty */
        { NotStatic }
    | STATIC
        { Static }

classOrStruct:
    | STRUCT
        { Struct }
    | CLASS
        { NotStruct }

typeName:
    | TYPENAME
        { \$1 }
    | TYPENAME SRO typeName
        { (markers (p \$1) (p \$3), v \$1 + "::" + v \$3) }

typeNameList:
    | typeName
        { [v \$1] }
    | typeName COMMA typeNameList
        { v \$1 :: \$3 }

ptype:
    | typeName
        { InitialType (v \$1) }
    | typeName GENSPACEOP LSQUARE ptypeList RSQUARE
        { ParamedType (InitialType <| v \$1, \$4)  }

ptypeList:
    | ptype
        { [\$1] }
    | ptype COMMA ptypeList
        { \$1 :: \$3 }

ifaceImplements:
    | /* empty */
        { [] }
    | COLON ptypeList
        { \$2 }

identOrBinop:
    | IDENT
        { (\$1, false) }
$for(binop in binops)\
    | $(binop)
        { (\$1, true) }
$endfor\

possType:
    | /* empty */
        { Undef }
    | ptype
        { \$1 }

possReturnType:
    | /* empty */
        { InitialType "System::Unit" }
    | COLON ptype
        { \$2 }

possTypeParams:
    | /* empty */
        { [] }
    | GENSPACEOP LSQUARE typeNameList RSQUARE
        { \$3 }

possConstraints:
    | /* empty */
        { [] }
    | WHERE params
        { \$2 }

methodSignature:
    | IDENT LPAR ptypeList RPAR possReturnType
        { (v \$1, \$3, \$5) }

methodSignatureList:
    | methodSignature
        { [\$1] }
    | methodSignature COMMA methodSignatureList
        { \$1 :: \$3 }

possForwardingMethods:
    | /* empty */
        { ForwardAll }
    | FORWARDING ALL
        { ForwardAll }
    | FORWARDING methodSignatureList
        { ForwardMethods \$2 }
    | HIDING methodSignatureList
        { HidingMethods \$2 }
    | HIDING ALL
        { HidingAll }


params:
    | /* empty */
        { [] }
    | IDENT COLON ptype
        { [Param(v \$1, \$3)] }
    | IDENT COLON ptype COMMA params
        { Param(v \$1, \$3) :: \$5 }

argList:
    | /* empty */
        { [] }
    | expr3
        { [\$1] }
    | expr3 COMMA argList
        { \$1 :: \$3 }

autoCtorList:
    | /* empty */
        { [] }
    | visibility IDENT COLON ptype autoCtorList
        { (\$1, v \$2, \$4, p \$2, p \$2) :: \$5 }
    | visibility IDENT COLON ptype COMMA autoCtorList
        { (\$1, v \$2, \$4, p \$2, \$5) :: \$6 }

possAutoCtor:
    | /* empty */
        { (fun _ _ -> []) }
    | LPAR autoCtorList RPAR
        { buildAutoCtor \$2 }



topLevelDecls:
    | /* empty */
        { [] }
    | USING typeName SEMI topLevelDecls
        { tbb (Using <| v \$2) \$1 \$3 :: \$4 }
    | NAMESPACE typeName LCURLY namespaceDecls RCURLY topLevelDecls
        { tbb (Namespace (v \$2, \$4)) \$1 \$3 :: \$6 }

namespaceDecls:
    | /* empty */
        { [] }
    | visibility classOrStruct TYPENAME possTypeParams possAutoCtor ifaceImplements possConstraints LCURLY classDecls RCURLY namespaceDecls
        {   let nA = buildClassStruct \$1 \$2 (v \$3) \$4 \$5 \$6 \$7 \$9 (p \$3) \$8
            nA :: \$11
        }
    | visibility MIXIN TYPENAME possTypeParams possAutoCtor ifaceImplements possConstraints LCURLY classDecls RCURLY namespaceDecls
        {   let mixinNAs = buildMixin \$1 (v \$3) \$4 \$5 \$6 \$7 \$9 (p \$3) \$8
            mixinNAs @ \$11
        }

    | visibility INTERFACE TYPENAME possTypeParams ifaceImplements possConstraints LCURLY interfaceDecls RCURLY namespaceDecls
        {   let ifaceNA =
                nbb (Interface (v \$3, \$1, ref \$5, \$8)) \$2 \$7
                |> applyTypeParamsConstraints \$4 \$6
            ifaceNA :: \$10
        }

interfaceDecls:
    | /* empty */
        { [] }
    | IDENT LPAR params RPAR possReturnType SEMI interfaceDecls
        { ibb (InterfaceProc (v \$1, \$3, ref \$5)) (p \$1) \$6 :: \$7 }

classDecls:
    | /* empty */
        { [] }
    | visibility static_ VAR IDENT COLON ptype EQUALS expr3 SEMI classDecls
        { cbb (ClassVar (v \$4, \$1, \$2, ref \$6, \$8)) \$3 \$9 :: \$10 }
    | visibility static_ VAR IDENT COLON ptype SEMI classDecls
        { cbb (ClassVar (v \$4, \$1, \$2, ref \$6, nop)) \$3 \$7 :: \$8 }
    | visibility static_ identOrBinop possTypeParams LPAR params RPAR possReturnType possConstraints LCURLY expr0OrNop RCURLY classDecls
        {   let cA = cbb (ClassProc (v (fst \$3), \$1, \$2, ref \$6, ref \$8, \$11)) (p <| fst \$3) \$10
            cA.IsBinop <- snd \$3
            (applyTypeParamsConstraints \$4 \$9 cA) :: \$13
        }
    | MIXIN IDENT COLON ptype possForwardingMethods SEMI classDecls
        { buildMixinClass (v \$2) \$4 nop \$5 \$1 \$6 :: \$7 }
    | MIXIN IDENT COLON ptype EQUALS expr3 possForwardingMethods SEMI classDecls
        { buildMixinClass (v \$2) \$4 \$6 \$7 \$1 \$8 :: \$9 }

expr0OrNop:
    | /* empty */
        { nop }
    | expr0
        { \$1 }

expr0:
    | expr1
        { \$1 }
    | expr1 expr0
        { eaa (Seq (ref \$1, ref \$2)) \$1 \$2 }

expr1:
    /*| expr4 LSQUARE expr3 RSQUARE EQUALS expr3 SEMI
        {   let dot = eab (Dot (\$1, "indexer")) \$1 \$2
            eab (Call (dot, [\$3; \$6])) \$1 \$7 }*/
    | expr4 EQUALS expr3 SEMI
        {   eab (Assign (\$1, \$3)) \$1 \$4 }
    | VAR IDENT EQUALS expr3 SEMI
        {   let var = ea (Var (v \$2)) (p \$2)
            let assign = eba (Assign (var, \$4)) (p \$2) \$4
            eba (DeclVar (v \$2, assign)) \$1 \$4 }
    | RETURN expr3 SEMI
        { eba (Return <| \$2) \$1 \$2 }
    | RETURN SEMI
        { ea ReturnVoid \$1  }
    | IF LPAR expr3 RPAR expr1 ELSE expr1
        { eba (If (\$3, \$5, \$7)) \$1 \$5 }
    | IF LPAR expr3 RPAR expr1
        { eba (If (\$3, \$5, nop)) \$1 \$5 }
    | WHILE LPAR expr3 RPAR expr2
        { ebb (While (\$3, \$5)) \$1 \$4 }
    | expr2 
        { \$1 }

expr2:
    | expr3 SEMI
        { \$1 }
    | LCURLY expr0OrNop RCURLY
        { \$2 }

expr3:  
$for(binop in binops)\
    | expr3 $(binop) expr3
        { eaa (Binop (v \$2, \$1, \$3)) \$1 \$3 }
$endfor\
    | LSQUARE ptype RSQUARE expr4
        { eba (Cast (ref \$2, \$4)) \$1 \$4 } 
    | expr4
        { \$1 }

expr4:
    | IDENT
        { ea (Var (v \$1)) (p \$1) }
    | IDENT GENSPACEOP LSQUARE ptypeList RSQUARE
        { ebb (VarTemplate (v \$1, ref \$4)) (p \$1) \$5  }
    | ptype
        { ea (VarStatic (ref \$1)) Pos.NilPos }
    | TRUE
        { ea (ConstBool true) \$1 }
    | FALSE
        { ea (ConstBool false) \$1 }
$for(x in [8,16,32,64])\
    | INT$(x)
        { ea (ConstInt ($(x), v \$1)) (p \$1) }
$endfor\
    | expr4 LPAR argList RPAR
        { eab (Call (\$1, \$3)) \$1 \$4 }
    /*| expr4 LSQUARE expr3 RSQUARE
        {   let dot = eab (Dot (\$1, "indexer")) \$1 \$2
            eab (Call (dot, [\$3])) \$1 \$4 
        }*/
    | expr5
        { \$1 }

expr5:
    | expr4 DOT IDENT
        { eab (Dot (\$1, v \$3)) \$1 (p \$3) }
    | expr4 DOT IDENT GENSPACEOP LSQUARE ptypeList RSQUARE
        { eab (DotTemplate (\$1, v \$3, ref \$6)) \$1 \$7 }
    | LPAR expr3 RPAR
        { \$2 }