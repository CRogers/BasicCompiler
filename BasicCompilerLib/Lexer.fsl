{

module Lexer

open System
open Microsoft.FSharp.Text.Lexing
open Parser

let lineno = ref 1

let lexeme = Lexing.LexBuffer<_>.LexemeString
let newline (lexbuf:LexBuffer<_>) = lexbuf.EndPos <- lexbuf.EndPos.NextLine

}

let integer = ['0'-'9']+
let ident = ['a'-'z' 'A'-'Z' '_']+
let white = [' ' '\t']
let endline = '\r'? '\n'

rule token = parse
    | white+                { token lexbuf }
    | endline               { newline lexbuf; token lexbuf }
    | eof                   { EOF }
    | "print"               { PRINT }
    | "proc"                { PROC }
    | "return"              { RETURN }
    | "start"               { START }
    | integer               { CONSTINT (Int32.Parse(lexeme lexbuf)) }
    | ident                 { IDENT (lexeme lexbuf) }
    | '('                   { LPAR }
    | ')'                   { RPAR }
    | '{'                   { LCURLY }
    | '}'                   { RCURLY }
    | '+'                   { ADD }
    | '-'                   { SUB }
    | '/'                   { DIV }
    | '*'                   { MUL }
    | ':'                   { COLON }
    | ';'                   { SEMI }
    | ','                   { COMMA }
    | '='                   { EQUALS }