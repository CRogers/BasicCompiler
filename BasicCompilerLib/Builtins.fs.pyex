module Builtins

open Tree
open LLVMTypes

$py(numeric=['Add','Sub','Div','Mul'])\
$py(numcomp=['Lt','Gt','LtEq','GtEq','Eq'])\
$py(boolean=['BoolAnd', 'BoolOr'])\

$py(intsizes=[8,16,32,64])\

let builtinsSeq =
    [
$for(x in intsizes)\
        ("System::Int$(x)", (let nA = NamespaceDeclA(Class ("System::Int$(x)", Public, Struct, []), Pos.NilPos) in nA.InstanceType <- i$(x); nA));
$endfor\
        ("System::Unit", (let nA = NamespaceDeclA(Class ("System::Unit", Public, Struct, []), Pos.NilPos) in nA.InstanceType <- tyVoid; nA));
    ]

let builtinsMap = Map.ofSeq builtinsSeq

let isBuiltin qname = Seq.exists (fun s -> s = qname) [$for(x in intsizes)"System::Int$(x)"; $endfor]

let binopToType binop ltype rtype = match (binop, ltype, rtype) with
$for(size in intsizes)\
$for(x in numeric)\
    | ($(x), UserType "System::Int$(size)", UserType "System::Int$(size)") -> Some <| UserType "System::Int$(size)"
$endfor\
$endfor\
$for(size in intsizes)\
$for(x in numcomp)\
    | ($(x), UserType "System::Int$(size)", UserType "System::Int$(size)") -> Some <| UserType "System::Bool"
$endfor\
$endfor\
$for(x in boolean)\
    | ($(x), UserType "System::Bool", UserType "System::Bool") -> Some <| UserType "System::Bool"
$endfor\
    | _ -> None